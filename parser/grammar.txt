[terminal]
break continue
char int float
if else while
* / + - < > = <= >= != && || ==
( ) [ ] { } ' ; $
ID INT FLOAT CHAR

[variable]
program_
program
main_declaration
type_specifier
compound_statement
declaration_list
declaration_type
statement_list
statement
expression_statement
expression
assignment_expression
unary_expression
logical_or_expression
logical_and_expression
equality_expression
relational_expression
additive_expression
multiplicative_expression
iteration_statement
jump_statement
selection_statement

[production]
program_ -> program
program -> main_declaration
program -> declaration_list main_declaration
main_declaration -> type_specifier ID ( ) compound_statement
type_specifier -> char
type_specifier -> int
type_specifier -> float

compound_statement -> { }
compound_statement -> { declaration_list }
compound_statement -> { statement_list }
compound_statement -> { declaration_list statement_list }

declaration_list -> declaration_type
declaration_list -> declaration_list declaration_type

declaration_type -> type_specifier ID ;

statement_list -> statement
statement_list -> statement_list statement

statement -> compound_statement
statement -> expression_statement 
statement -> iteration_statement 
statement -> jump_statement 
statement -> selection_statement

expression_statement -> ;
expression_statement -> expression ;

expression -> assignment_expression

assignment_expression -> ID = assignment_expression
assignment_expression -> logical_or_expression

logical_or_expression -> logical_and_expression
logical_or_expression -> logical_or_expression || logical_and_expression

logical_and_expression -> equality_expression
logical_and_expression -> logical_and_expression && equality_expression

equality_expression -> relational_expression
equality_expression -> equality_expression == relational_expression
equality_expression -> equality_expression != relational_expression

relational_expression -> additive_expression
relational_expression -> relational_expression < additive_expression
relational_expression -> relational_expression > additive_expression
relational_expression -> relational_expression <= additive_expression
relational_expression -> relational_expression >= additive_expression

additive_expression -> multiplicative_expression
additive_expression -> additive_expression + multiplicative_expression
additive_expression -> additive_expression - multiplicative_expression

multiplicative_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * unary_expression
multiplicative_expression -> multiplicative_expression / unary_expression

unary_expression -> ID
unary_expression -> INT
unary_expression -> FLOAT
unary_expression -> CHAR
unary_expression -> ( logical_or_expression )

iteration_statement -> while ( expression ) compound_statement

jump_statement -> continue ;
jump_statement -> break ;

selection_statement -> if ( expression ) statement
selection_statement -> if ( expression ) statement else statement
 